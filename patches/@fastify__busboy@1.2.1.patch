diff --git a/lib/utils/decodeText.js b/lib/utils/decodeText.js
index ec477161affaa7de3d9d334cd6515c97b8919f49..cfc176c052f2d9146b2643344f7373c46fdc725a 100644
--- a/lib/utils/decodeText.js
+++ b/lib/utils/decodeText.js
@@ -1,19 +1,8 @@
 'use strict'
 
-let TextDecoder
-try {
-  TextDecoder = require('util').TextDecoder
-} catch (e) { }
-
-const { TextDecoder: PolyfillTextDecoder, getEncoding } = require('text-decoding')
-
 // Node has always utf-8
 const textDecoders = new Map()
-if (TextDecoder) {
-  textDecoders.set('utf-8', new TextDecoder('utf-8'))
-} else {
-  textDecoders.set('utf-8', new PolyfillTextDecoder('utf-8'))
-}
+textDecoders.set('utf-8', new TextDecoder('utf-8'))
 textDecoders.set('utf8', textDecoders.get('utf-8'))
 
 function decodeText (text, textEncoding, destEncoding) {
@@ -27,34 +16,10 @@ function decodeText (text, textEncoding, destEncoding) {
         textDecoders.set(destEncoding, new TextDecoder(destEncoding))
         return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))
       } catch (e) {
-        if (getEncoding(destEncoding)) {
-          try {
-            textDecoders.set(destEncoding, new PolyfillTextDecoder(destEncoding))
-            return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))
-          } catch (e) { }
-        }
-      }
-    }
-  }
-  return text
-}
-
-function decodeTextPolyfill (text, textEncoding, destEncoding) {
-  if (text) {
-    if (textDecoders.has(destEncoding)) {
-      try {
-        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))
-      } catch (e) { }
-    } else {
-      if (getEncoding(destEncoding)) {
-        try {
-          textDecoders.set(destEncoding, new PolyfillTextDecoder(destEncoding))
-          return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))
-        } catch (e) { }
       }
     }
   }
   return text
 }
 
-module.exports = TextDecoder ? decodeText : decodeTextPolyfill
+module.exports = decodeText